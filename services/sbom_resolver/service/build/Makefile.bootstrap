

BASE_OS_IMAGE   = docker.io/bomres/base_os_alpine
RESOLVER_IMAGE  = docker.io/bomres/alpine_resolver

DIR=alpine
TEMPDIR=/tmp/alpine


config:
	@docker run   --rm  $(CONTAINER_OPTIONS)  -v "$$PWD/$(DIR)/build:/sandbox" -w /sandbox  -e IMAGE=$(BASE_OS_IMAGE) $(BASE_OS_IMAGE)  config

init:
	@docker run   --rm  $(CONTAINER_OPTIONS)  -v "$$PWD/$(DIR)/build:/sandbox" -w /sandbox  -e IMAGE=$(BASE_OS_IMAGE) $(BASE_OS_IMAGE)  init

prepare:
	@make -C $$PWD/$(DIR)/build/base_os  builder

public_build:
	@make -C $$PWD/$(DIR)/build/base_os  public_build

private_build:
	@make -C $$PWD/$(DIR)/build/base_os  private_build

download:
	@make -C  $$PWD/$(DIR)/build/base_os  download

TEST_MAKEFILE = $(DIR)/test/Makefile
.PHONY: $(TEST_MAKEFILE)
$(TEST_MAKEFILE) :
	mkdir -p  $(DIR)/test
	echo "" > $@
	echo "# Generated by $(BASE_OS_IMAGE)" >> $@
	echo "" >> $@
	echo "# This is a simple test that lists all packages being resolved by Alpine package manager" >> $@
	echo "# The output is included in the aggregated SBOM " >> $@
	echo "" >> $@
	echo "include ../build/base_os/config/settings" >> $@
	echo "" >> $@
	echo "CONTAINER_IMAGE = \$$(BASE_OS_IMAGE):\$$(BASE_OS_VERSION)" >> $@
	echo "" >> $@
	echo "test:" >> $@
	echo "\tdocker run   --rm  -i --entrypoint='/usr/local/bin/bom.sh'  --name alpine\$$(ALPINE_VERSION) \$$(CONTAINER_IMAGE) | tee os.bom" >> $@
	echo "shell:" >> $@
	echo "\tdocker run   --rm  -i -t --name alpine\$$(ALPINE_VERSION) \$$(CONTAINER_IMAGE) sh " >> $@


test: $(TEST_MAKEFILE)
	@make -C $$PWD/$(DIR)/test  test DIR=$(DIR)
	cp -f    $$PWD/$(DIR)/test/os.bom $$PWD/$(DIR)/build/base_os/sbom/os.bom

shell: 
	@make -C $$PWD/$(DIR)/test  shell DIR=$(DIR)

CONTAINER_OPTIONS= -v  $(TEMPDIR)/src:/mnt/alpine/src
CONTAINER_OPTIONS+= -v  $(TEMPDIR)/checkout:/mnt/alpine/checkout
CONTAINER_OPTIONS+= -v  $(TEMPDIR)/cache:/mnt/alpine/cache

CONTAINER_OPTIONS+= -e  APORTS_SRC=/mnt/alpine/src
CONTAINER_OPTIONS+= -e  APORTS_CHECKOUT=/mnt/alpine/checkout
CONTAINER_OPTIONS+= -e  APORTS_CACHE=/mnt/alpine/cache


CURL=curl --silent -k --trace-ascii /tmp/log  --fail --show-error --http1.1  -L


JWT = $(shell cat access_token)
URL=http://localhost:8080

CLIENT_ID=my_container
CLIENT_SECRET=qwerty


token:
	@$(CURL)  -d "scope=s1 s2" --data "grant_type=client_credentials&client_id=$(CLIENT_ID)&client_secret=$(CLIENT_SECRET)"  \
        $(URL)/resolver/alpine/v1/token  | grep access_token  | awk -F\" '{print $$4}' >  access_token

aggregate:
	@$(CURL)  -X POST   -s -o - "$(URL)/resolver/alpine/v1/aggregate"                                        \
                -H  "accept: application/json"                                                     \
                -H  "Authorization: Bearer $(JWT)"                                                 \
                -H  "Content-Type: multipart/form-data"                                            \
                -F "config=@$(DIR)/build/base_os/config/settings;type=application/txt"                                    \
                -F "desired=@$(DIR)/build/base_os/sbom/os.conf;type=application/txt"                                    \
                -F "pkgindex=@$(DIR)/build/base_os/sbom/apkindex.tar;type=application/x-tar"                            \
                -F "resolved=@$(DIR)/build/base_os/sbom/os.bom;type=application/txt"  | tee $(DIR)/build/base_os/sbom/aggregated.json
index:
	@$(CURL)  -X POST   -s -o - -X POST "$(URL)/resolver/alpine/v1/index" \
                -H  "Authorization: Bearer $(JWT)" \
                -H 'Content-Type: multipart/form-data' \
                -F apkindex=@$(DIR)/build/base_os/sbom/apkindex.tar  | tee  $(DIR)/build/base_os/sbom/index.json

resolve:
	@$(CURL) -X POST "$(URL)/resolver/alpine/v1/resolve" \
                -H  "Authorization: Bearer $(JWT)" \
                -H  "X-Message-Ttl: 10"                                    \
                -H 'Content-Type: multipart/form-data' \
                -F sbom=@$(DIR)/build/base_os/sbom/aggregated.json | tee $(DIR)/build/base_os/sbom/resolved.json

clone:
	@$(CURL) --max-time 400  -X POST "$(URL)/resolver/alpine/v1/src" \
                -H  "Authorization: Bearer $(JWT)" \
                -H 'Content-Type: multipart/form-data' \
                -F "url=https://git.alpinelinux.org/aports" 

apkindex:
	( cd $(DIR)/build/base_os/download  && find . -name APKINDEX.tar.gz | cut -c3- |  tar cf $(PWD)/$(DIR)/build/base_os/sbom/apkindex.tar -T -  )



service:
	docker run -i -t -p  8080:8080  $(CONTAINER_OPTIONS)  $(RESOLVER_IMAGE) server

build: init config prepare public_build download private_build test apkindex token aggregate clone index resolve



internal_patches:
	docker run -i -t -v "$$PWD/$(DIR)/build/base_os/sbom:/sbom" -v "$(TEMPDIR)/src:/mnt/alpine/src" -v "$$PWD/$(DIR)/build/base_os/source:/source"  $(RESOLVER_IMAGE) download internal patch

internal_code:
	docker run -i -t -v "$$PWD/$(DIR)/build/base_os/sbom:/sbom" -v "$(TEMPDIR)/src:/mnt/alpine/src" -v "$$PWD/$(DIR)/build/base_os/source:/source"  $(RESOLVER_IMAGE) download internal code

internal_build:
	docker run -i -t -v "$$PWD/$(DIR)/build/base_os/sbom:/sbom" -v "$(TEMPDIR)/src:/mnt/alpine/src" -v "$$PWD/$(DIR)/build/base_os/source:/source"  $(RESOLVER_IMAGE) download internal build

external_patches:
	docker run -i -t -v "$$PWD/$(DIR)/build/base_os/sbom:/sbom" -v "$(TEMPDIR)/src:/mnt/alpine/src" -v "$$PWD/$(DIR)/build/base_os/source:/source"  $(RESOLVER_IMAGE) download external patch

external_code:
	docker run -i -t -v "$$PWD/$(DIR)/build/base_os/sbom:/sbom" -v "$(TEMPDIR)/src:/mnt/alpine/src" -v "$$PWD/$(DIR)/build/base_os/source:/source"  $(RESOLVER_IMAGE) download external code

download_source: internal_patches internal_code internal_build external_patches external_code

clean: 
	@rm -rf $(DIR) access_token
